name: Pull Request,Push Action

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Pull cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # Set Up JDK
      - name: Set Up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Install NDK
      #     - name: Install NDK
      #       run: echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;20.0.5594570" --sdk_root=${ANDROID_SDK_ROOT}
      # Runs test
      - name: Run tests
        run: ./gradlew test

      # Restore release key
      - name: restoreReleaseKeystore
          run:|
          echo "${{ secrets.RELEASE_KEYSTORE }}" >release.keystore.asc
          gpg -d --passphrase "${{ secrets.RELEASE_KEYSTORE_PASSPHRASE }}" --batch release.keystore.asc > key/open_source_key.jks

      # Restore release config
      - name: restoreReleaseConfig
          run:|
          echo "${{ secrets.RELEASE_CONFIG }}" >releaseConfig.asc
          gpg -d --passphrase "${{ secrets.RELEASE_CONFIG_PASSPHRASE }}" --batch releaseConfig.asc > app/releaseConfig.properties

      # Create Build
      - name: Build Project
        run: ./gradlew clean bundleRelease assembleRelease

      # Upload APK
      - name: Upload APK
        uses: actions/upload-artifact@v1
        with:
          name: release-app
          path: app/build/outputs/apk/release/app-release.apk
